general:
  cleanup: false                                   # Enabling this will prevent the work_dir from being cleaned up after running
  workers: 4                                       # Number of concurrent Go routines to process the repositories with
  work_dir: repos/                                 # Directory to clone the repositories to
  stateful: true                                   # Ensures you do not create more than 1 pull request for each repo. Requires storage to be configured

scm:
  pull_request:
    title: Updating go.mod dependencies
    description: Updating go.mod dependencies
    strategy: batch                                # Enabling the batch strategy will ensure we do not overwhelm CI by slowly updating modules (Not implemented yet)
    batch_size: 1                                  # Number of pull requests to open at a time
    batch_delay: 1m                                # Delay in seconds, minutes, hours between pull request batches
    auto_merge: true                               # Will automatically merge the pull request if it is mergeable. This enables stateful

  bitbucket_server:
    # BITBUCKET_SERVER_USERNAME env var required
    # BITBUCKET_SERVER_PASSWORD env var required
    url: http://127.0.0.1:7990/rest                # URL of the bitbucket server, must have /rest appended
    project_key: GO                                # Bitbucket project key to scan for repositories
    clone_type: http                               # Only http clone type support at the moment, later ssh may be supported

vcs:
  git:
    # GIT_USERNAME env var required
    # GIT_PASSWORD env var required
    source_branch: updating-go-modules             # Name of the source branch to create the current datetime is always appended
    target_branch: master                          # Name of the target branch to create the branch from and pull request against
    commit_message: Updating go.mod dependencies
    commit_author_name: FirstName LastName
    commit_author_email: admin@admin.com

bump:
  go_mod_tidy: true                                # Will run `go mod tidy` if set to true after each go get
  allowed_modules: []                              # List of allowed modules to update. If set any modules not in the allowed lists are blocked
  allowed_domains: []                              # List of allowed module domains to update. If set any modules not in the allowed lists are blocked
  blocked_modules: []                              # List of explicit modules to not update
  blocked_domains: []                              # List of explicit module domains to not update

storage:
  file:
    filename: gomodbump.json                       # Saves the state to the file specified here
